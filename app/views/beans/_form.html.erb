<%= form_with model: bean, local: true do |f| %>
  <%= render "shared/error_messages", object: f.object %>

  <!-- 銘柄の入力欄 -->
  <div class="form-control text-left font-body mt-[50px] mb-[40px]">
    <%= f.label :name, class: "label w-full font-bold" %>
    <%= f.text_field :name, autofocus: true, class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.name') %>
  </div>

  <!-- 生産国の入力欄 -->
  <div class="form-control text-left font-body mb-[40px]">
    <%= f.label :country, t('.label.country'), class: "label w-full font-bold" %>
    <!-- bean.countryが存在すれば、それをフィールドの初期値とする -->
    <% if bean.country.present? %>
      <%= f.text_field :country, autofocus: true, value: bean.country.name, class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.country') %>
    <% else %>
      <%= f.text_field :country, autofocus: true, value: "", class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.country') %>
    <% end %>
  </div>

  <div class="flex font-body mb-[40px] space-x-[20px]">
    <!-- 生産地区の入力欄 -->
    <div class="form-control w-1/2 text-left font-body">
      <%= f.label :area, class: "label w-full font-bold" %>
      <%= f.text_field :area, autofocus: true, class: "input input-bordered input-primary form-control w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.area') %>
    </div>

    <!-- 生産農園の入力欄 -->
    <div class="form-control w-1/2 text-left font-body">
      <%= f.label :farm, class: "label w-full font-bold" %>
      <%= f.text_field :farm, autofocus: true, class: "input input-bordered input-primary form-control w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.farm') %>
    </div>
  </div>

  <!-- 焙煎度とブレンドorストレートの選択欄 -->
  <div class="flex font-body mb-[40px] space-x-[20px]">
    <div class="form-control w-1/2 text-left font-body">
      <%= f.label :roast_level, class: "label w-full font-bold" %>
      <%= f.select :roast_level, Bean.roast_levels_i18n.invert, {}, { class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]" } %>
    </div>
    <div class="form-control w-1/2 text-left font-body">
      <%= f.label :is_blended, class: "label w-full font-bold" %>
      <%= f.select :is_blended, Bean.is_blendeds_i18n.invert, {}, { class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]" } %>
    </div>
  </div>

  <!-- 購入店舗情報の入力欄 -->
  <div class="form-control text-left font-body mt-[50px] mb-[40px]">
    <%= f.label :store, t('.label.store'), class: "label w-full font-bold" %>
    <!-- bean.storeが存在すれば、それをフィールドの初期値とする -->
    <% if bean.store.present? %>
      <%= f.text_field :store, id: "Store", autofocus: true, value: bean.store.name, autocomplete: "off", class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.store') %>
    <% else %>
      <%= f.text_field :store, id: "Store", autofocus: true, value: "", autocomplete: "off", class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.store') %>
    <% end %>
    <!-- 'hidden_field'で店舗の'place_id'を送信 -->
    <%= f.hidden_field :place_id, id: "PlaceId" %>
  </div>

  <!-- 画像ファイルのアップロード欄 -->
  <div class="form-control text-left font-body mt-[50px] mb-[40px]">
    <%= f.label :image, class: "label w-full font-bold" %>
    <%= f.file_field :image, class: "file-input file-input-bordered file-input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]" %>
    <%= f.hidden_field :image_cache %>
  </div>

  <!-- 味バランスの選択欄（後々レーティング形式に移行する） -->
  <div class="text-left font-body mb-[40px]">
    <p class="label font-bold"><%= t('.label.taste_balance') %></p>

    <!-- 1行、5列で表示 -->
    <div class="columns-5">
      <% ["bitterness", "sweetness", "acidity", "body", "aroma"].each do |attr| %>
        <%= f.label attr.to_sym, class: "label w-full font-bold" %>
        <!-- 1~5の整数値をドロップダウンリストから選択 -->
        <%= f.select attr.to_sym,
            options_for_select([["1（弱め）", 1], ["2", 2], ["3（中程度）", 3], ["4", 4], ["5（強め）", 5]], f.object.send(attr)),
            { include_blank: t('.placeholder.taste_balance') },
            class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px] text-xs" %>
      <% end %>
    </div>
  </div>

  <!-- コメント入力欄 -->
  <div class="form-control text-left font-body mb-[50px]">
    <%= f.label :comment, class: "label w-full font-bold" %>
    <%= f.text_area :comment, autofocus: true, class: "textarea textarea-bordered textarea-primary w-full h-[200px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.comment') %>
  </div>

  <!-- 新規投稿ボタン -->
  <div class="actions text-center w-full">
    <%= f.submit nil, class: "btn btn-warning w-[200px] h-[50px]" %>
  </div>
<% end %>

<!-- 店舗情報入力フィールドに、Place Autocompleteを使用したオートコンプリート機能を追加するためのJS -->
<script>
  // フィールドにオートコンプリート機能を付与するための関数
  async function initAutocomplete () {
    // ライブラリの読み込み
    const { Autocomplete } = await google.maps.importLibrary("places");

    // 店舗情報入力フィールドと'place_id'を取得
    const inputStore = document.getElementById('Store');
    const inputPlaceId = document.getElementById('PlaceId');

    if (!inputStore || !inputPlaceId) return;

    // オートコンプリートのオプション
    const autocompleteOptions = {
      types: ['establishment'],
      componentRestrictions: { country: ['jp'] }
    };

    // オートコンプリートのインスタンスを作成
    const autocompleteStore = new Autocomplete(inputStore, autocompleteOptions);

    // 店舗情報入力フィールドに変更が加えられた時
    autocompleteStore.addListener('place_changed', function() {
      const place = autocompleteStore.getPlace();
      inputStore.value = place.name; // 場所名を入力
      inputPlaceId.value = place.place_id // 場所の'place_id'を入力
    });
  }

  // ページが読み込まれた時に'initAutocomplete'を発火させる
  document.addEventListener('turbo:load', initAutocomplete);

  // Turboがレンダリングを完了した時にも'initAutocomplete'を発火させる
  document.addEventListener('turbo:render', initAutocomplete);
</script>

<!-- Maps JavaScript APIの各種ライブラリを使用できるようにするためのscriptタグ -->
<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= ENV["GOOGLE_MAPS_API_KEY"] %>",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
