<div class="flex flex-col items-center w-[700px] mx-auto my-[100px]">
  <div class="w-full text-black">
    <div class="text-center font-bold space-y-[10px]">
      <h2 class="text-4xl font-heading"><%= t('.title') %></h2>
      <p class="text-base font-body"><%= t('.description') %></p>
    </div>

    <%= form_with model: @bean, local: true do |f| %>
      <%= render "shared/error_messages", object: @bean %>

      <!-- 銘柄の入力欄 -->
      <div class="form-control text-left text-base font-body mt-[50px] mb-[40px]">
        <%= f.label :name, class: "label w-full font-bold" %>
        <%= f.text_field :name, autofocus: true, class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.name') %>
      </div>

      <!-- 生産国の入力欄 -->
      <div class="form-control text-left text-base font-body mb-[40px]">
        <%= f.label :country, t('.label.country'), class: "label w-full font-bold" %>
        <!-- @bean.countryが存在すれば、それをフィールドの初期値とする -->
        <%= f.text_field :country, autofocus: true, value: "", class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.country') %>
      </div>

      <div class="flex font-body mb-[40px] space-x-[20px]">
        <!-- 生産地区の入力欄 -->
        <div class="form-control w-1/2 text-left text-base font-body">
          <%= f.label :area, class: "label w-full font-bold" %>
          <%= f.text_field :area, autofocus: true, class: "input input-bordered input-primary form-control w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.area') %>
        </div>

        <!-- 生産農園の入力欄 -->
        <div class="form-control w-1/2 text-left text-base font-body">
          <%= f.label :farm, class: "label w-full font-bold" %>
          <%= f.text_field :farm, autofocus: true, class: "input input-bordered input-primary form-control w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.farm') %>
        </div>
      </div>

      <!-- 焙煎度とブレンドorストレートの選択欄 -->
      <div class="flex font-body mb-[40px] space-x-[20px]">
        <div class="form-control w-1/2 text-left text-base font-body">
          <%= f.label :roast_level, class: "label w-full font-bold" %>
          <%= f.select :roast_level, options_for_select([["浅煎り", 1], ["中煎り", 2], ["深煎り", 3]]), { include_blank: t('.placeholder.roast_level') }, class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]" %>
        </div>
        <div class="form-control w-1/2 text-left text-base font-body">
          <%= f.label :blended, "ブレンド or ストレート", class: "label w-full font-bold" %>
          <%= f.select :blended, options_for_select([["ブレンド", true], ["ストレート", false]]), { include_blank: t('.placeholder.blended') }, class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]" %>
        </div>
      </div>

      <!-- 購入店舗情報の入力欄 -->
      <div class="form-control text-left text-base font-body mt-[50px] mb-[40px]">
        <%= f.label :store, t('.label.store'), class: "label w-full font-bold" %>
        <%= f.text_field :store, id: "Store", autofocus: true, autocomplete: "off", class: "input input-bordered input-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.store') %>
        <!-- 'hidden_field'で店舗の'place_id'を送信 -->
        <%= f.hidden_field :place_id, id: "PlaceId" %>
      </div>

      <!-- 味バランスの選択欄（後々レーティング形式に移行する） -->
      <div class="text-left font-body mb-[40px]">
        <p class="label font-bold"><%= t('.taste_balance') %></p>

        <!-- 1行、5列で表示 -->
        <div class="columns-5">
          <% ["bitterness", "sweetness", "acidity", "body", "aroma"].each do |attr| %>
            <%= f.label attr.to_sym, class: "label w-full font-bold" %>
            <!-- 1~5の整数値をドロップダウンリストから選択 -->
            <%= f.select attr.to_sym,
                options_for_select([["1（弱め）", 1], ["2", 2], ["3（中程度）", 3], ["4", 4], ["5（強め）", 5]]),
                { include_blank: t('.placeholder.taste_balance') },
                class: "select select-bordered select-primary w-full h-[50px] bg-white border-[3px] border-primary rounded-[10px] text-xs" %>
          <% end %>
        </div>
      </div>

      <!-- コメント入力欄 -->
      <div class="form-control text-left text-base font-body mb-[50px]">
        <%= f.label :comment, class: "label w-full font-bold" %>
        <%= f.text_area :comment, autofocus: true, class: "textarea textarea-bordered textarea-primary w-full h-[200px] bg-white border-[3px] border-primary rounded-[10px]", placeholder: t('.placeholder.comment') %>
      </div>

      <!-- 新規投稿ボタン -->
      <div class="actions text-center w-full mb-[50px]">
        <%= f.submit t('.submit'), class: "btn btn-warning w-[200px] h-[50px]" %>
      </div>
    <% end %>

    <!-- 豆一覧へ戻るボタン -->
    <div class="text-center w-full">
      <%= link_to t('.back_to_bean_index'), beans_path, class: "btn btn-primary w-[200px] h-[50px]" %>
    </div>
  </div>
</div>

<!-- 店舗情報入力フィールドに、Places APIを使用したオートコンプリート機能を追加するためのJS -->
<script>
  function initAutocomplete () {
    document.addEventListener('DOMContentLoaded', function () {
      const inputStore = document.getElementById('Store');
      const inputPlaceId = document.getElementById('PlaceId');

      // オートコンプリートのオプション
      const options = {
        types: ['establishment'],
        componentRestrictions: { country: 'JP' }
      };

      // オートコンプリート適用
      const autocompleteStore = new google.maps.places.Autocomplete(inputStore, options);

      // 店舗情報入力フィールドに変更が加えられた時
      autocompleteStore.addListener('place_changed', function() {
        const place = autocompleteStore.getPlace();
        inputStore.value = place.name;
        inputPlaceId.value = place.place_id
      });
    });
  }
</script>

<!-- Place Autocompleteを使用するためのライブラリを読み込む -->
<script
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places&callback=initAutocomplete">
</script>
